pipeline {
    agent any

    environment {
        // 공통 환경 변수
        GCP_DEPLOY_HOST = "rublin322@picscore.net"
        GCP_DEPLOY_PATH = "/home/rublin322/lumina"
        AWS_DEPLOY_HOST = "ubuntu@k12s306.p.ssafy.io"
        AWS_DEPLOY_PATH = "/home/ubuntu/lumina"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    echo "현재 브랜치: ${env.BRANCH_NAME}"
                    echo "현재 워크스페이스: ${env.WORKSPACE}"
                    
                    // 변경된 파일 목록 가져오기
                    def changedFiles = sh(script: "git diff --name-only HEAD~1 HEAD || git diff --name-only", returnStdout: true).trim()
                    
                    // luna 디렉토리 변경 여부 확인
                    def lunaChanges = changedFiles.split('\n').findAll { it.startsWith('luna/') }
                    
                    // luna 디렉토리에 변경이 없으면 빌드 중단
                    if (lunaChanges.size() == 0 && env.BRANCH_NAME != 'master') {
                        echo "luna 디렉토리에 변경사항이 없습니다. 빌드를 건너뜁니다."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }
        }

        stage('Prepare Environment') {
            parallel {
                stage('Dev Environment') {
                    when {
                        anyOf {
                            branch 'develop'
                            branch 'backend'
                        }
                    }
                    steps {
                        withCredentials([file(credentialsId: 'env-luna-dev-content', variable: 'ENV_LUNA_DEV_PATH')]) {
                            script {
                                def envContent = readFile(ENV_LUNA_DEV_PATH)
                                writeFile file: 'luna/.env', text: envContent
                            }
                        }
                    }
                }
                
                stage('Prod Environment') {
                    when {
                        branch 'master'
                    }
                    steps {
                        withCredentials([file(credentialsId: 'env-luna-prod-content', variable: 'ENV_LUNA_PROD_PATH')]) {
                            script {
                                def envContent = readFile(ENV_LUNA_PROD_PATH)
                                writeFile file: 'luna/.env', text: envContent
                            }
                        }
                    }
                }
            }
        }

        stage('Build and Deploy') {
            parallel {
                stage('Develop Branch') {
                    when {
                        anyOf {
                            branch 'develop'
                            branch 'backend'
                        }
                    }
                    stages {
                        stage('Deploy to GCP - Dev') {
                            steps {
                                sshagent(credentials: ['gcp-ssh-key']) {
                                    // 디렉토리 생성
                                    sh "ssh -o StrictHostKeyChecking=no ${GCP_DEPLOY_HOST} 'mkdir -p ${GCP_DEPLOY_PATH}/luna'"
                                    
                                    // Luna 프로젝트 파일 전송
                                    sh "scp -o StrictHostKeyChecking=no -r luna/.env ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/.env"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/docker-compose.yaml ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/docker-compose.yaml"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/Dockerfile ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/Dockerfile"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/package.json ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/package.json"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/pnpm-lock.yaml ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/pnpm-lock.yaml"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/tsconfig.json ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/tsconfig.json"

                                    // 소스 코드 디렉토리 전송
                                    sh "ssh -o StrictHostKeyChecking=no ${GCP_DEPLOY_HOST} 'mkdir -p ${GCP_DEPLOY_PATH}/luna/src'"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/src/* ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/src/"
                                    
                                    // 캐릭터 디렉토리 전송
                                    sh "ssh -o StrictHostKeyChecking=no ${GCP_DEPLOY_HOST} 'mkdir -p ${GCP_DEPLOY_PATH}/luna/characters'"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/characters/* ${GCP_DEPLOY_HOST}:${GCP_DEPLOY_PATH}/luna/characters/"
                                    
                                    // 데이터 디렉토리 생성 (데이터는 유지)
                                    sh "ssh -o StrictHostKeyChecking=no ${GCP_DEPLOY_HOST} 'mkdir -p ${GCP_DEPLOY_PATH}/luna/data'"
                                    
                                    // Docker 컨테이너 실행
                                    sh """
                                    ssh -o StrictHostKeyChecking=no ${GCP_DEPLOY_HOST} '
                                        cd ${GCP_DEPLOY_PATH}/luna && 
                                        docker compose up --build -d
                                    '
                                    """
                                }
                            }
                        }
                    }
                }
                
                stage('Master Branch') {
                    when {
                        branch 'master'
                    }
                    stages {
                        stage('Deploy to AWS - Prod') {
                            steps {
                                sshagent(credentials: ['aws-ssh-key']) {
                                    // 디렉토리 생성
                                    sh "ssh -o StrictHostKeyChecking=no ${AWS_DEPLOY_HOST} 'mkdir -p ${AWS_DEPLOY_PATH}/luna'"
                                    
                                    // Luna 프로젝트 파일 전송
                                    sh "scp -o StrictHostKeyChecking=no -r luna/.env ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/.env"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/docker-compose.yaml ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/docker-compose.yaml"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/Dockerfile ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/Dockerfile"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/package.json ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/package.json"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/pnpm-lock.yaml ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/pnpm-lock.yaml"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/tsconfig.json ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/tsconfig.json"

                                    // 소스 코드 디렉토리 전송
                                    sh "ssh -o StrictHostKeyChecking=no ${AWS_DEPLOY_HOST} 'mkdir -p ${AWS_DEPLOY_PATH}/luna/src'"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/src/* ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/src/"
                                    
                                    // 캐릭터 디렉토리 전송
                                    sh "ssh -o StrictHostKeyChecking=no ${AWS_DEPLOY_HOST} 'mkdir -p ${AWS_DEPLOY_PATH}/luna/characters'"
                                    sh "scp -o StrictHostKeyChecking=no -r luna/characters/* ${AWS_DEPLOY_HOST}:${AWS_DEPLOY_PATH}/luna/characters/"
                                    
                                    // 데이터 디렉토리 생성 (데이터는 유지)
                                    sh "ssh -o StrictHostKeyChecking=no ${AWS_DEPLOY_HOST} 'mkdir -p ${AWS_DEPLOY_PATH}/luna/data'"
                                    
                                    // Docker 컨테이너 실행
                                    sh """
                                    ssh -o StrictHostKeyChecking=no ${AWS_DEPLOY_HOST} '
                                        cd ${AWS_DEPLOY_PATH}/luna && 
                                        docker compose up --build -d
                                    '
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (env.BRANCH_NAME == 'develop' || env.BRANCH_NAME == 'backend') {
                    echo '개발 환경 배포 성공'
                } else if (env.BRANCH_NAME == 'master') {
                    echo '운영 환경 배포 성공'
                }
            }
        }
        failure {
            script {
                if (env.BRANCH_NAME == 'develop' || env.BRANCH_NAME == 'backend') {
                    echo '개발 환경 배포 실패'
                } else if (env.BRANCH_NAME == 'master') {
                    echo '운영 환경 배포 실패'
                }
            }
        }
        always {
            echo 'Luna 에이전트 배포 파이프라인 종료'
            cleanWs()
        }
    }
}